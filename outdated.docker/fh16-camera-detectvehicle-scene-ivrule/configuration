###############################################################################
###############################################################################
#
# GLOBAL CONFIGURATION
#
# The following attributes define the buffer sizes for recording and
# replaying. You need to adjust these parameters depending on the
# camera resolution for example (640x480x3 --> 1,000,000 for memorySegment,
# 1280x720x3 --> 2,800,000), 1280x1024x3 --> 3,932,160
global.buffer.memorySegmentSize = 4000000 # Size of a memory segment in bytes.
global.buffer.numberOfMemorySegments = 50 # Number of memory segments.

# List of modules expected to participate in a session.
global.session.expectedModules = knowledge-scene,knowledge-ivrule,diagnostics-health,proxy-ledstrip,perception-detectvehicle:0,proxy-camera:0

###############################################################################
###############################################################################
#
# CONFIGURATION FOR ODSUPERCOMPONENT
#
# If the managed level is pulse_shift, all connected modules will be informed
# about the supercomponent's real time by this increment per module. Thus, the
# execution times per modules are better aligned with supercomponent and the
# data exchange is somewhat more predictable.
odsupercomponent.pulseshift.shift = 10000 # (in microseconds)

# If the managed level is pulse_time_ack, this is the timeout for waiting for
# an ACK message from a connected client.
odsupercomponent.pulsetimeack.timeout = 5000 # (in milliseconds)

# If the managed level is pulse_time_ack, the modules are triggered sequentially
# by sending pulses and waiting for acknowledgment messages. To allow the modules
# to deliver their respective containers, this yielding time is used to sleep
# before supercomponent sends the pulse messages the next module in this execution
# cycle. This value needs to be adjusted for networked simulations to ensure
# deterministic execution. 
odsupercomponent.pulsetimeack.yield = 5000 # (in microseconds)

# List of modules (without blanks) that will not get a pulse message from odsupercomponent.
odsupercomponent.pulsetimeack.exclude = odcockpit


###############################################################################
###############################################################################
# proxy
proxy-camera:0.type = opencv-ip-axis
proxy-camera:0.name = front-left
proxy-camera:0.port = 10.42.42.90
proxy-camera:0.username = root
proxy-camera:0.password = gcdc
proxy-camera:0.resolution = 1280x720
proxy-camera:0.bpp = 3
proxy-camera:0.mount.x = 3.1
proxy-camera:0.mount.y = 0.5
proxy-camera:0.mount.z = 1.0
proxy-camera:0.mount.roll = 0.0
proxy-camera:0.mount.pitch = -0.1
proxy-camera:0.mount.yaw = 0.2


###############################################################################
###############################################################################
# Scene
knowledge-scene.mergeDistance = 2.0
knowledge-scene.validUntilDuration = 1
knowledge-scene.memoryCapacity = 5.0 # seconds


###############################################################################
###############################################################################
# Ivrule
knowledge-ivrule.mioAngleRange = 30.0 #degrees
knowledge-ivrule.mioDistanceRange = 30.0 #meters
knowledge-ivrule.memoryDuration = 1 #seconds
knowledge-ivrule.desiredAngularSize = 6 #degrees
knowledge-ivrule.desiredOpticalFlow = 5.6 #meters/s


###############################################################################
###############################################################################
# perception
perception-detectvehicle:0.source = front-left
perception-detectvehicle:0.debug = 0   # 0 do not show a window with debug information (does not work in Docker!)


###############################################################################
###############################################################################
# Diagnostics
diagnostics-health.script = ./checkHealth.sh
diagnostics-health.sleep = 60 # Sleep between health checks in seconds

